#include <stdlib.h> //Библиотека, с помощью которой можно использовать функцию rand() для генерации случайных чисел
#include <iostream>

using namespace std;
int X = 0, Y = 0; //координаты зайца, столбцы и строки соответственно
int TCount = 0; //Количество поставленных ловушек
char T[5][5]; //массив ловушек
char P[5][5]; //массив координат где мы уже были


// х и у - координаты движения по массиву
// TX и TY - координаты, куда поставить ловушку

int main(int argc, char** argv)
{
    setlocale(LC_ALL, "Russian");//Системная функция (заложенаая в системе для обозначения в программе, что нужно использовать русски язык во все программе)
    for (int i = 0; i < 5; i++) //Происходит заполнение массива нулями, для его объявляения. Два цикла один для строк, другой для столбцов (нахожятся друг в друге)
    {
        for (int j = 0; j < 5; j++)
        {
            T[i][j] = 0; //Массив для ловушек
            P[i][j] = 0; //Массив для мест, где заяц уже был
        }
    }
    P[X][Y] = true; //Говорим, что по координатам X и Y заяц уже был
    while (true) //Пока не встретим "break" внутри этого цикла while, мы заходим в этот цикл и выполняем ниже описанные действия
    {
        for (int y = 0; y < 5; y++) //X и Y - координаты зайца, столбцы и строки соответственно, х и у - координаты движения по массиву
        {
            cout<<'\n'; //Перенос строки (начать выводить с новой строки в консоли)
            for (int x = 0; x < 5; x++)
            {
                if (X == x && Y == y && T[x][y] == true) //Если Координаты зайца соответсвуют координатам движения по массиву И в массиве T по этим координатам (х и у) стоит ловушка (==true), тогда мы заходим вовнутрь
                {
                    cout << "|*|";
                }
                else if (X == x && Y == y) //Иначе, если не то, что выше, то если на этих координатах стоит только заяц без лоовушки, то печатем *
                {
                    cout << " * ";
                }
                else if (T[x][y] == true) //Иначе, если не то, что выше, то если на этих координатах стоит только ловушка, то пишем #
                {
                    cout << " # ";
                }
                else if (P[x][y] == true) //Иначе, если не то, что выше, то если на этих координатах заяц уже был ранее, то пишем .
                {
                    cout << " . ";
                }
                else //Иначе, если всё, что было выше, то в ячейке ничего не было, и пишем туда о
                {
                    cout << " o ";
                }
            }
        }
        if (T[X][Y] == true) //Если по координатам нахождения зайца в массиве ловушек стоит ловушка, то значит, что заяц в ловушке. Заходим внутрь If
        {
            cout << '\n'<< "Ура, ты победил! Заяц пойман!" <<endl; //Выводим сообщение
            break; //И выходим из большого цикла while. Об этом break написано в строке 32. Встретили - вышли вообще.
        }
        if (X == 2 && Y == 2) //Если координаты зайца указывают на то, что он в центре (в матрице 5х5 центр - это 2,2)
        {
            cout << '\n' << "Игра окончена (заяц в центре)" << endl; //Выводим это сообщение
            break;//И выходим из большого цикла while. Об этом break написано в строке 32. Встретили - вышли вообще.
        }
        if (TCount == 3) //Если количество ловушек равно 3, то тогда заходим в этот if
        {
            cout << '\n' << "Игра окончена (больше нет ловушек)" <<endl; //Выводим это сообщение
            break; //И выходим из большого цикла while. Об этом break написано в строке 32. Встретили - вышли вообще.
        }
        //Если ничего не произошло - то мы идем сюда
        int TX, TY; //Переменные, которые вводит пользователь в строках 80 и 87, соответственно координаты х и у
        while (true) //Такая же суть цикла, что и в строке 32
        {
            cout << '\n' << "Введите координату Х: " << endl; //Выводим сообщение
            cin >> TX; //Вводим координату Х, по которой хотим поставить ловушку
            if (TX >= 0 && TX <= 4) { //Если введенное число в интрвале от 0 до 4 включительно, то пользователь ввел координаты правильно, тогда мы заходим внутрь if
                break; //Тут уже понятно. Выходим из цикла while На 77 строке
            }
            else cout << '\n' << "Координата должна быть в пределах поля" << endl; //Иначе, если неправильно ввели координату, то мы зайдем сюда и выведем это сообщение
        }
        while (true) //Тут тоже самое что и раньше, только с координатой Y
        {
            cout << '\n' << "Введите координату Y: " << endl;
            cin >> TY;
            if (TY >= 0 && TY < 5) {break;}
            cout << '\n' << "Координата должна быть в пределах поля"<< endl;
        }
        if (TX == X && TY == Y) //Если введенные координаты, по которым пользователь хочет ввести ловушку совпадают с текущими координатамии зайца, то тогда заходим внутрь этого if
        {
            cout << '\n' << "Нельзя поставить ловушку на зайца" << endl; //Выводим это сообщение
            system("pause");
            continue;
        }
        if (TX == 2 && TY == 2) //Если введенные координаты, по которым пользователь хочет ввести ловушку совпадают с координатами центра поля, то заходим в этот if
        {
            cout << '\n' << "Нельзя поставить ловушку в центр" << endl; //выводим это сообщение
            system("pause");
            continue;
        }
        //Если он поставил все ловушки правильно, то идем сюда
        T[TX][TY] = true; //Ставим в массив ловушек Т по координатам TX и TY значение true, то есть указываем, что в данной ячейке стоит ловушка
        TCount++; //Это переменная количества ловушек. Мы увеличиваем ее на 1, потому что добавили ловушку. Теперь поставленных ловущек на одну больше
        int jump = rand()%2+1; //jump - целочисленная переменная, в которую мы помещаем результат выполнения функции rand(). То есть в функции rand произошла генерация случайного числа. И это случайное число мы записали в переменную jump
        int x2 = 0, y2 = 0; //Это переменные, которые используются, для того, чтобы изменить координаты нахождения зайца, то есть от координат зайца мы будем отнимать или прибавлять x2 и y2 соответственно
        //Описание движения по спирали ниже
        if (X == 0 && Y == 0 //Проверка на нахождения зайца в конкретной координате для определения направления его движения
            ||	X == 1 && Y == 0
            ||	X == 2 && Y == 0
            ||	X == 3 && Y == 0
            ||	X == 0 && Y == 1
            ||	X == 1 && Y == 1
            ||	X == 2 && Y == 1
            ||	X == 1 && Y == 2
            ||	X == 2 && Y == 2)
        {
            x2 = x2+1; y2 = 0; //Прибавляем х координату - то есть двигаемся вправо
        }
        else if	(	X == 4 && Y == 0 //Иначе если не то что выше - сверяем эти координаты
                        ||	X == 4 && Y == 1
                        ||	X == 4 && Y == 2
                        ||	X == 4 && Y == 3
                        ||	X == 3 && Y == 1
                        ||	X == 3 && Y == 2)
        {
            x2 = 0; y2 = y2+1; //Двигаемся вниз
        }
        else if	(	X == 4 && Y == 4 //Иначе если не то что выше - сверяем координаты
                        ||	X == 3 && Y == 4
                        ||	X == 2 && Y == 4
                        ||	X == 1 && Y == 4
                        ||	X == 3 && Y == 3
                        ||	X == 2 && Y == 3
                        ||	X == 1 && Y == 4)
        {
            x2 = x2-1; y2 = 0; //Двигаемся влево
        }
        else if	(	X == 0 && Y == 4 //Иначе если не то что выше - сверяем координаты
                        ||	X == 0 && Y == 3
                        ||	X == 0 && Y == 2
                        ||	X == 1 && Y == 3
                        ||	X == 0 && Y == 3)
        {
            x2 = 0; y2 = y2-1; //Двигаемсяя вверх
        }
        X = X + jump * x2; //К текущим координатам зайца прибавляем наш шаг (положительный, если вправо и отрицательный если влево) и умножаем его на результат выполнения функции rand() (Если 2, то прыгнет на 2, если 1 - 1)
        Y = Y + jump * y2; //То же самое только для Y
        P[X][Y] = true; //Отметили, что в этом месте сейчас заяц в массиве содержащем все нахождения зайца
    }
    system("pause");
    return 0;
}
